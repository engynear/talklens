services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "6543:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth:
    build:
      context: ./talklens.auth
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - JwtSettings__ExpirationInMinutes=${JWT_EXPIRATION_MINUTES}
      - ASPNETCORE_URLS=http://+:80
    expose:
      - "80"
    ports:
      - "${AUTH_PORT}:80"
    depends_on:
      postgres:
        condition: service_healthy

  collector:
    build:
      context: ./talklens.collector
      dockerfile: TalkLens.Collector.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwt__SecretKey=${JWT_SECRET_KEY}
      - Storage__Minio__Endpoint=minio:9000
      - Storage__Minio__AccessKey=${MINIO_ROOT_USER}
      - Storage__Minio__SecretKey=${MINIO_ROOT_PASSWORD}
      - Redis__ConnectionString=redis:6379
      - Kafka__BootstrapServers=kafka:29092
    expose:
      - "80"
    ports:
      - "${COLLECTOR_PORT}:80"
    depends_on:
      - postgres
      - minio
      - redis
      - kafka
      - auth

  frontend:
    build:
      context: ./talklens.frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    ports:
      - "${FRONTEND_PORT}:5173"
    depends_on:
      - auth
      - collector

  analyzer:
    build:
      context: ./talklens.analyzer
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - FOLDER_ID=${FOLDER_ID}
      - API_KEY=${API_KEY}
    depends_on:
      - postgres
      - kafka
      - collector

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "9002:${CLICKHOUSE_PORT}"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_HOST: ${CLICKHOUSE_HOST}
      CLICKHOUSE_PORT: ${CLICKHOUSE_PORT}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DATABASE: ${CLICKHOUSE_DATABASE}

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    #ports:
     # - "9000:9000"
      #- "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  redis:
    image: redis:latest
    #ports:
    #  - "6379:6379"
    volumes:
      - redis_data:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    #ports:
    #  - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "5002:9092"
    #  - "29092:29092"
    expose:
      - "9092"
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    #ports:
    #  - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: talklens-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

volumes:
  pgdata:
  clickhouse_data:
  minio_data:
  redis_data:
